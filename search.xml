<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis常用命令</title>
    <url>/posts/ed3b1c3a/</url>
    <content><![CDATA[<h1 id="Redis-介绍"><a href="#Redis-介绍" class="headerlink" title="Redis 介绍"></a>Redis 介绍</h1><p>Redis 是一种基于键值对（key-value）的数据库，其中 value 可以为 String、Hash、List、 Set、Zset 等多种数据结构，可以满足很多应用场景。还提供了键过期，发布订阅，事务， 流水线，等附加功能。</p>
<p>流水线：Redis 的流水线功能允许客户端一次将多个命令请求发送给服务器， 并将被执行的多个命令请求的结果在一个命令回复中全部返回给客户端，使用这个功能可以有效地减少客户端在执行多个命令时需要与服务器进行通信的次数。 </p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol>
<li>速度快，数据放在内存中，官方给出的读写性能 10 万/S，与机器性能也有关<br> 数据放内存中是速度快的主要原因 <ol>
<li>C 语言实现，与操作系统距离近 </li>
<li>使用了单线程架构，预防多线程可能产生的竞争问题 </li>
</ol>
</li>
<li>键值对的数据结构服务器 </li>
<li>丰富的功能：见上功能 </li>
<li>简单稳定：单线程 </li>
<li>持久化：发生断电或机器故障，数据可能会丢失，持久化到硬盘 </li>
<li>主从复制：实现多个相同数据的 redis 副本 </li>
<li>高可用和分布式：哨兵机制实现高可用，保证 redis 节点故障发现和自动转移 </li>
<li>客户端语言多：java php python c c++ nodejs 等</li>
</ol>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li>缓存：合理使用缓存加快数据访问速度，降低后端数据源压力 </li>
<li>排行榜：按照热度排名，按照发布时间排行，主要用到列表和有序集合 </li>
<li>计数器应用：视频网站播放数，网站浏览数，使用 redis 计数 </li>
<li>社交网络：赞、踩、粉丝、下拉刷新 </li>
<li>消息队列：发布和订阅</li>
</ol>
<h1 id="安装与启动"><a href="#安装与启动" class="headerlink" title="安装与启动"></a>安装与启动</h1><p>环境：linux</p>
<table>
<thead>
<tr>
<th>可执行文件</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>redis-server</td>
<td>启动 redis</td>
</tr>
<tr>
<td>redis-cli</td>
<td>redis 命令行客户端</td>
</tr>
<tr>
<td>redis-benchmark</td>
<td>基准测试工具</td>
</tr>
<tr>
<td>redis-check-aof</td>
<td>AOF 持久化文件检测和修复工具</td>
</tr>
<tr>
<td>redis-check-dump</td>
<td>RDB 持久化文件检测和修复工具</td>
</tr>
<tr>
<td>redis-sentinel</td>
<td>启动哨兵</td>
</tr>
</tbody></table>
<h3 id="redis-server-启动"><a href="#redis-server-启动" class="headerlink" title="redis-server 启动"></a>redis-server 启动</h3><p>默认配置：<code>redis-server</code> ，日志输出版本信息，端口6379</p>
<p>运行启动：<code>redis-server --port 6380</code>    不推荐</p>
<p>配置文件启动：<code>redis-server /opt/redis/redis.conf</code>    灵活，生产环境推荐使用</p>
<h3 id="redis-cli-启动"><a href="#redis-cli-启动" class="headerlink" title="redis-cli 启动"></a>redis-cli 启动</h3><p>交互式：<code>redis-cli -h [host] -p [port]</code>    连接到 redis 服务，无 -h [host] 参数默认连接 127.0.0.1，无 -p [port] 参数默认连6379</p>
<p>命令式：<code>redis-cli -h 127.0.0.1 -p 6739 get hello</code> 取 key = hello 的 value</p>
<p>停止服务：<code>redis-cli shutdown</code>    关闭时：断开连接，生成持久化文件，相对安全；使用 kill 关闭不会生成持久化文件，还会造成缓冲区非法关闭，可能会造成 AOF 和丢失数据</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="全局命令"><a href="#全局命令" class="headerlink" title="全局命令"></a>全局命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>keys *</td>
<td>查看所有键</td>
</tr>
<tr>
<td>dbsize</td>
<td>查看键总数，如果存在大量键，线上禁止使用此命令</td>
</tr>
<tr>
<td>exists [key]</td>
<td>查看键是否存在，存在返回1，不存在返回0</td>
</tr>
<tr>
<td>del [key]</td>
<td>删除键， 返回删除键的个数，删除不存在的键返回0</td>
</tr>
<tr>
<td>expire [key] [seconds]</td>
<td>设置键过期时间</td>
</tr>
<tr>
<td>ttl [key]</td>
<td>查看剩余的过期时间</td>
</tr>
<tr>
<td>type [key]</td>
<td>查看键的数据结构类型，键不存在返回 none</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker的安装及使用</title>
    <url>/posts/f9a8f708/</url>
    <content><![CDATA[<p>记录 Docker 在 CentOS7 下的安装与常用命令</p>
<p>环境：</p>
<ul>
<li>CentOS7</li>
</ul>
<span id="more"></span>

<h1 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h1><p>CentOS7 系统 CentOS-Extras 库中已带 Docker，可以直接安装：</p>
<h2 id="非最新版本安装"><a href="#非最新版本安装" class="headerlink" title="非最新版本安装"></a>非最新版本安装</h2><p><code>$ sudo yum install docker</code>    </p>
<h2 id="最新版本安装"><a href="#最新版本安装" class="headerlink" title="最新版本安装"></a>最新版本安装</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils </span><br><span class="line">$ sudo yum-config-manager --add-repo https:<span class="comment">//mirrors.aliyun.com/docker-ce/linux/centos/docke r-ce.repo </span></span><br><span class="line">$ sudo yum install docker-ce</span><br></pre></td></tr></table></figure>

<h2 id="查看-Docker-版本"><a href="#查看-Docker-版本" class="headerlink" title="查看 Docker 版本"></a>查看 Docker 版本</h2><p><code>docker version</code> </p>
<p><code>docker info</code></p>
<h2 id="启动-Docker"><a href="#启动-Docker" class="headerlink" title="启动 Docker"></a>启动 Docker</h2><p><code>$ sudo service docker start</code></p>
<h2 id="设置随系统启动"><a href="#设置随系统启动" class="headerlink" title="设置随系统启动"></a>设置随系统启动</h2><p><code>$ sudo chkconfig docker on</code></p>
<h1 id="Docker-的基本操作"><a href="#Docker-的基本操作" class="headerlink" title="Docker 的基本操作"></a>Docker 的基本操作</h1><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><h3 id="docker-run-start-stop-restart-kill-rm-pause-unpause"><a href="#docker-run-start-stop-restart-kill-rm-pause-unpause" class="headerlink" title="docker [run|start|stop|restart|kill|rm|pause|unpause]"></a>docker [run|start|stop|restart|kill|rm|pause|unpause]</h3><ul>
<li><code>docker run/create [镜像名]</code><br>  创建一个新的容器并运行一个命令</li>
<li><code>docker start/stop/restart [容器名]</code><br>  启动/停止/重启一个容器</li>
<li><code>docker kill [容器名]</code><br>  杀死容器，不等待进程的响应时间</li>
<li><code>docker rm [容器名]</code><br>  删除已经停止的容器</li>
<li><code>docker pause/unpause [容器名]</code><br>  暂停/恢复容器中的进程</li>
</ul>
<h3 id="docker-ps-inspect-exec-logs-export-import"><a href="#docker-ps-inspect-exec-logs-export-import" class="headerlink" title="docker [ps|inspect|exec|logs|export|import]"></a>docker [ps|inspect|exec|logs|export|import]</h3><ul>
<li><code>docker ps [-a]</code><br>  查看容器列表（默认查看运行时的容器，-a 查看所有容器）</li>
<li><code>docker inspect [容器名]</code><br>  查看容器配置元数据</li>
<li><code>docker exec -it [容器名] /bin/bash</code><br>  进入容器环境中交互操作</li>
<li><code>docker logs --since=&quot;2021-08-01&quot; -f --tail=10 [容器名]</code><br>  查看容器日志</li>
<li><code>docker cp path1 [容器名]:path</code><br>  容器与主机之间的数据拷贝</li>
<li><code>docker export -o test.tar [容器名]</code><br>  <code>docker export [容器名] &gt;test.tar</code><br>  文件系统作为一个 tar 归档文件</li>
<li><code>docker import test.tar [镜像名:版本号]</code><br>  导入归档文件，成为一个镜像</li>
</ul>
<h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><h3 id="docker-images-rmi-tag-build-history-save-load"><a href="#docker-images-rmi-tag-build-history-save-load" class="headerlink" title="docker images|rmi|tag|build|history|save|load]"></a>docker images|rmi|tag|build|history|save|load]</h3><ul>
<li><code>docker images</code><br>  列出本地镜像列表</li>
<li><code>docker rmi [镜像名:版本号]</code><br>  删除镜像</li>
<li><code>docker tag [镜像名:版本号][仓库]</code><br>  标记本地镜像，将其归入某一仓库</li>
<li><code>docker build -t [镜像名:版本号] [path]</code><br>  Dockerfile 创建镜像</li>
<li><code>docker history [镜像名:版本号]</code><br>  查看指定镜像的创建历史</li>
<li><code>docker save -o xxx.tar [镜像名:版本号]</code><br>  <code>docker save [镜像名:版本号] &gt; xxx.tar</code><br>  将镜像保存成 tar 归档文件</li>
<li><code>docker load --input xxx.tar</code><br>  <code>docker load &lt; xxx.tar</code><br>  从归档文件加载镜像</li>
</ul>
<h2 id="交互式创建容器并进入"><a href="#交互式创建容器并进入" class="headerlink" title="交互式创建容器并进入"></a>交互式创建容器并进入</h2><p>启动 docker 前台进程<br><code>docker run -it --name [镜像名:版本号] /bin/bash</code></p>
<p>退出并关闭容器<br><code>exit</code></p>
<p>退出不关闭容器<br><code>Ctrl + P + Q</code></p>
<p>启动 docker 后台进程<br><code>docker run -d --name [镜像名:版本号] /bin/bash</code></p>
<p>进入已运行的容器<br><code>docker exec -it [容器名] /bin/bash</code></p>
<h2 id="Docker-容器的主业"><a href="#Docker-容器的主业" class="headerlink" title="Docker 容器的主业"></a>Docker 容器的主业</h2><p>在 Docker 理念中，容器启动时，应当为它指定主业是什么，如 nginx 的容器主业是 nginx 代理服务，tomcat 容器的主业是 web 服务等。</p>
<p>容器创建时，必须指定主业任务，如不指定，则容器退出。</p>
<p>在 dockerfile 打包镜像时，可以使用 cmd 命令来指定一个默认的主业，如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># base image</span></span><br><span class="line"><span class="keyword">FROM</span> cent-ngx2:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PATH /usr/local/nginx/sbin:$PATH</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;nginx -g&#x27;daemon off;&#x27;&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>既然镜像里是默认主业，则意味着在创建容器时，可以覆盖此默认命令，如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d --name test2 2825bf46c0e8 <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="推荐的-ENTRYPOINT-方式"><a href="#推荐的-ENTRYPOINT-方式" class="headerlink" title="推荐的 ENTRYPOINT 方式"></a>推荐的 ENTRYPOINT 方式</h3><p>镜像本身应该有稳定的主业，应当指定后不能更改用途，于是引入 ENTRYPOINT，使用 ENTRYPOINT 定义容器入口，它不能被 run 中的 CMD 命令覆盖，如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># base image</span></span><br><span class="line"><span class="keyword">FROM</span> nginxx:v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PATH /usr/local/nginx/sbin:$PATH</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;nginx&quot;</span>]	<span class="comment">#指定入口命令为 nginx 服务</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;-g&quot;</span>,<span class="string">&quot;daemon off;&quot;</span>]	<span class="comment">#指定 nginx 命令的参数</span></span></span><br></pre></td></tr></table></figure>

<p>执行 <code>docker build -t nginxx:v3</code></p>
<h3 id="手动打包-SpringBoot-镜像"><a href="#手动打包-SpringBoot-镜像" class="headerlink" title="手动打包 SpringBoot 镜像"></a>手动打包 SpringBoot 镜像</h3><ol>
<li><p>将 SpringBoot 打包好的 jar 包上传</p>
</li>
<li><p>在同级目录下，创建 Dockerfile 文件</p>
 <figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">[root@localhost web]<span class="comment"># vi Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>	<span class="comment">#含 jdk8 的镜像</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> [<span class="string">&quot;member-1.0.jar&quot;</span>, <span class="string">&quot;web.jar&quot;</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/web.jar&quot;</span>]	<span class="comment">#入口命令启动jar</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>dockerfile 打包业务镜像</p>
 <figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">[root@localhost web]<span class="comment"># docker build -t member:v1</span></span><br><span class="line">Sending build context to Docker deamon <span class="number">17.69</span> MB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">4</span> : <span class="keyword">FROM</span> openjdk:<span class="number">8</span></span><br><span class="line">...</span><br><span class="line">Successfully built <span class="number">10437</span>e588305</span><br></pre></td></tr></table></figure></li>
<li><p>启动镜像，即得到业务运行<br> <code>docker run -d -p 8090:8090 --name member member:v1</code></p>
</li>
<li><p>打开浏览器校验页面</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码分析</title>
    <url>/posts/9998d034/</url>
    <content><![CDATA[<p>本文将记录编译学习Spring源码并理解其设计思想的笔记。</p>
<p>编译环境：</p>
<ul>
<li>Spring版本：5.2.8</li>
<li>Gradle</li>
<li>Idea</li>
</ul>
<span id="more"></span>

<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p><code>git clone --branch v5.2.8.RELEASE https://gitee.com/Z201/spring-framework.git</code></p>
<h2 id="修改-settings-gradle-文件"><a href="#修改-settings-gradle-文件" class="headerlink" title="修改 settings.gradle 文件"></a>修改 settings.gradle 文件</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">  gradlePluginPortal()</span><br><span class="line">  maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span> &#125;</span><br><span class="line">  maven &#123; url <span class="string">&#x27;https://repo.spring.io/plugins-release&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改-gradle-properties-文件"><a href="#修改-gradle-properties-文件" class="headerlink" title="修改 gradle.properties 文件"></a>修改 gradle.properties 文件</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">version</span>=<span class="string">5.2.8.RELEASE</span></span><br><span class="line"><span class="meta">org.gradle.jvmargs</span>=<span class="string">-Xmx2048M</span></span><br><span class="line"><span class="meta">org.gradle.caching</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">org.gradle.parallel</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">org.gradle.configureondemand</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">org.gradle.daemon</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h2 id="修改-build-gradle-文件"><a href="#修改-build-gradle-文件" class="headerlink" title="修改 build.gradle 文件"></a>修改 build.gradle 文件</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/nexus/content/groups/public/&#x27;</span> &#125;</span><br><span class="line">maven &#123; url <span class="string">&#x27;https://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h2><p><code>gradlew :spring-oxm:compileTestJava</code></p>
<p>出现 BUILD SUCCESSFUL 即为编译成功</p>
<h2 id="IDEA导入"><a href="#IDEA导入" class="headerlink" title="IDEA导入"></a>IDEA导入</h2><p>File<br>    &gt; New<br>        &gt; Project from Existing Souces<br>            &gt; spring-framework-master<br>                &gt; Import project from external model<br>                    &gt; Gradle</p>
<p>控制台出现 BUILD SUCCESSFUL 即为导入成功</p>
<h2 id="在测试工程中关联本地Spring包"><a href="#在测试工程中关联本地Spring包" class="headerlink" title="在测试工程中关联本地Spring包"></a>在测试工程中关联本地Spring包</h2><p>新建工程</p>
<p>test-project<br>    &gt; Project Structure<br>        &gt; Libraries<br>            &gt; 修改 Classes 与 Sources 的源，确定</p>
]]></content>
      <categories>
        <category>Spring源码</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo搭建个站</title>
    <url>/posts/762bbc7c/</url>
    <content><![CDATA[<p>本文将记录搭建本站的过程，以及踩过的那些坑。</p>
<p>搭建环境：</p>
<ul>
<li>域名 - 阿里云</li>
<li>Hexo 5.4.0</li>
<li>Git</li>
</ul>
<span id="more"></span>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><code>$ npm install -g hexo-cli</code></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><code>hexo init blog</code></p>
<h2 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h2><ol>
<li>登录GitHub</li>
<li>New repository</li>
<li>设置仓库名为 用户名.github.io</li>
</ol>
<!--more-->

<h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">hexo n new_blog #新建博文</span><br><span class="line">hexo g	#生成</span><br><span class="line">hexo s	#启动本地预览</span><br></pre></td></tr></table></figure>

<p>浏览器地址：localhost:4000</p>
<h1 id="生成SSH密钥文件"><a href="#生成SSH密钥文件" class="headerlink" title="生成SSH密钥文件"></a>生成SSH密钥文件</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Git用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;Git邮箱&quot;</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;Git邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="配置GitHub密钥"><a href="#配置GitHub密钥" class="headerlink" title="配置GitHub密钥"></a>配置GitHub密钥</h1><p>这里卡了很久，原因是 GitHub 从2021年8月13日开始不接受用户密码的方式进行 Git 操作验证，于是改为 SSH 连接。</p>
<ol>
<li>GitHub - Setting - SSH and GPG keys</li>
<li>New SSH key</li>
<li>复制上一步生成的公钥 id_rsa.pub 的内容到 Key 中</li>
<li>Add SSH key</li>
<li>测试是否配置成功<br> <code>ssh -T git@github\.com</code></li>
</ol>
<h1 id="Git推送"><a href="#Git推送" class="headerlink" title="Git推送"></a>Git推送</h1><ol>
<li><p>修改 blog 文件夹下的配置文件 _config.yml</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">粘贴GitHub仓库的SSH</span> <span class="string">Clone地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">当前分支名（可能为main或master）</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>tips: 修改branch名称</p>
<ul>
<li>仓库Setting - Branches</li>
</ul>
</blockquote>
</li>
<li><p>保存配置文件</p>
</li>
<li><p>安装 Git 部署插件<br> <code>npm install hexo-deployer-git --save</code></p>
</li>
<li><p>清除缓存<br> <code>hexo cl</code></p>
</li>
<li><p>生成<br> <code>hexo g</code></p>
</li>
<li><p>部署<br> <code>hexo d</code></p>
</li>
<li><p>浏览器地址：<u>https://用户名.github.io</u></p>
</li>
</ol>
<h2 id="hexo-d-出错的解决办法"><a href="#hexo-d-出错的解决办法" class="headerlink" title="hexo d 出错的解决办法"></a>hexo d 出错的解决办法</h2><p>可根据报错信息自行尝试。</p>
<ul>
<li><p>取消代理<br>  <code>git config --global --unset http.proxy</code></p>
</li>
<li><p>修改 hosts 文件<br>  <code>92.30.255.113 github.com</code></p>
</li>
<li><p>网络连接问题</p>
<p>  修改缓存大小</p>
<p>  <code>git config --global http.postBuffer 524288000</code></p>
<p>  配置 git 的最低速度和最低速度时间</p>
<p>  <code>git config --global http.lowSpeedLimit 0</code></p>
<p>  <code>git config --global http.lowSpeedTime 999999</code></p>
</li>
</ul>
<h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><ol>
<li><p>阿里云 - 控制台 - 域名 - 域名列表 - 解析 - 添加记录</p>
</li>
<li><blockquote>
<p>记录类型：A</p>
<p>主机记录：@</p>
<p>解析线路：默认</p>
<p>记录值：192.30.252.154</p>
</blockquote>
</li>
<li><blockquote>
<p>记录类型：A</p>
<p>主机记录：@</p>
<p>解析线路：默认</p>
<p>记录值：192.30.252.153</p>
</blockquote>
</li>
<li><blockquote>
<p>记录类型：CNAME</p>
<p>主机记录：www</p>
<p>解析线路：默认</p>
<p>记录值：填写 用户名.github.io</p>
</blockquote>
</li>
<li><p>GitHub 仓库 - Setting - Pages - Custom domain 填写阿里云域名 - Save</p>
</li>
<li><p>本地 blog 文件夹 - source - 新建文本文件 - 内容填写阿里云域名 - 命名为 CNAME 格式为所有文件 - 保存</p>
</li>
<li><pre><code class="c"> hexo cl    #清除缓存
 hexo g    #生成
 hexo d    #部署
</code></pre>
</li>
<li><p>浏览器输入域名测试访问</p>
</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
